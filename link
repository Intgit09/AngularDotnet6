BeginAcceptTcpClient and EndAcceptTcpClient are part of the older asynchronous pattern for network programming.
For new development, AcceptTcpClientAsync is the preferred approach due to its simpler syntax and better integration with modern asynchronous programming concepts.
If you're working with older code that uses BeginAcceptTcpClient and EndAcceptTcpClient, understand their roles and consider refactoring to use asynchronous methods when possible.

In modern C# (.NET 8 and later), it's generally recommended to use the asynchronous methods provided by the TcpListener class directly, such as AcceptTcpClientAsync. These methods offer simplified asynchronous programming without the need for explicit BeginAcceptTcpClient and EndAcceptTcpClient.



using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

public class TcpClientTest
{
    private readonly string serverAddress;
    private readonly int port;

    public TcpClientTest(string serverAddress, int port)
    {
        this.serverAddress = serverAddress;
        this.port = port;
    }

    public async Task ConnectAndSendMessageAsync(string message)
    {
        using (TcpClient client = new TcpClient(serverAddress, port))
        {
            Console.WriteLine($"Connected to server: {serverAddress}:{port}");

            using (NetworkStream stream = client.GetStream())
            {
                // Send data to the server
                byte[] data = Encoding.ASCII.GetBytes(message);
                await stream.WriteAsync(data, 0, data.Length);

                Console.WriteLine($"Sent message: {message}");

                // Receive a response from the server (if applicable)
                byte[] buffer = new byte[1024];
                int bytesRead;

                while (!stoppingToken.IsCancellationRequested && (bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length, stoppingToken)) > 0)
                {
                    string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);
                    Console.WriteLine($"Received from server: {response}");
                }
            }
        }
    }

    private static CancellationTokenSource stoppingTokenSource = new CancellationTokenSource();
    public static CancellationToken stoppingToken => stoppingTokenSource.Token;

    public static void Main(string[] args)
    {
        if (args.Length < 2)
        {
            Console.WriteLine("Usage: TcpClientTest <server_address> <port>");
            return;
        }

        string serverAddress = args[0];
        int port = int.Parse(args[1]);

        var client = new TcpClientTest(serverAddress, port);
        string message = "Hello from the client!";
        client.ConnectAndSendMessageAsync(message).Wait(); // Wait for the async task to finish for demonstration

        Console.WriteLine("Press any key to exit...");
        Console.ReadKey();

        stoppingTokenSource.Cancel(); // Gracefully cancel the cancellation token
    }
}
