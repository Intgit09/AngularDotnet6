https://www.c-sharpcorner.com/article/upload-large-files-to-mvc-webapi-using-partitioning/

services.Configure<IISServerOptions>(options =>
            {
                options.MaxRequestBodySize = null;
            });
services.Configure<KestrelServerOptions>(options =>
            {
                options.Limits.MaxRequestBodySize = null;
            });

List<FileModel>
The API endpoint performs validation to ensure the total size of all attachments does not exceed 35 MB. If the validation fails, the API will return an appropriate error message.

POST /api/upload HTTP/1.1
Content-Type: application/json

{
  "files": [
    {
      "FileName": "example-image.jpg",
      "Content": "<binary-data>",
      "FileType": "image/jpeg"
    },
    {
      "FileName": "example-document.pdf",
      "Content": "<binary-data>",
      "FileType": "application/pdf"
    }
  ]
}


<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <targets>
    <!-- Target 1 - Primary target -->
    <target xsi:type="File" name="target1" fileName="logs/logfile.txt"
            layout="${longdate} ${level:uppercase=true} ${message}" />

    <!-- Target 2 - Fallback target -->
    <target xsi:type="File" name="target2" fileName="logs/fallback_logfile.txt"
            layout="${longdate} ${level:uppercase=true} ${message}" />
  </targets>

  <rules>
    <!-- Rule for Target 1 (primary) -->
    <logger name="*" minlevel="Trace" writeTo="target1" />

    <!-- Rule for Target 2 (fallback) -->
    <logger name="*" minlevel="Trace" writeTo="target2" />
  </rules>

</nlog>
using Serilog;
using Serilog.Events;
using Serilog.Sinks.Splunk;
using Serilog.Sinks.File;

public class Program
{
    public static void Main(string[] args)
    {
        Log.Logger = new LoggerConfiguration()
            .MinimumLevel.Verbose()
            .WriteTo.Logger(lc =>
                lc.Filter.ByIncludingOnly(evt => evt.Level >= LogEventLevel.Information)
                    .WriteTo.Splunk(
                        host: "your_splunk_host",
                        port: 8088,
                        source: "your_source_name",
                        index: "your_index_name",
                        customFields: new[] { new Field("your_custom_field_name", "your_custom_field_value") }))
            .WriteTo.File("logs/logfile.txt", rollingInterval: RollingInterval.Day)
            .CreateLogger();

        // Sample log statements
        Log.Information("This is an informational message.");
        Log.Error("An error occurred.");

        Log.CloseAndFlush();
    }
}
{
  "Serilog": {
    "Using": ["Serilog.Sinks.Splunk", "Serilog.Sinks.File"],
    "MinimumLevel": "Verbose",
    "WriteTo": [
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "WriteTo": [
              {
                "Name": "Splunk",
                "Args": {
                  "host": "your_splunk_host",
                  "port": 8088,
                  "source": "your_source_name",
                  "index": "your_index_name",
                  "customFields": [
                    { "Name": "your_custom_field_name", "Value": "your_custom_field_value" }
                  ]
                }
              },
              {
                "Name": "File",
                "Args": {
                  "path": "logs/logfile.txt",
                  "rollingInterval": "Day"
                }
              }
            ]
          },
          "restrictedToMinimumLevel": "Information"
        }
      }
    ]
  }
}


using NLog;

public class Program
{
    public static void Main(string[] args)
    {
        // Set the NLog variables
        GlobalDiagnosticsContext.Set("variable1", "value1");
        GlobalDiagnosticsContext.Set("variable2", "value2");
        // ...

        // Configure NLog and start logging
        // ...
    }
}
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <!-- Other NLog configurations -->

  <targets>
    <target xsi:type="File" name="fileTarget" fileName="logfile.txt" layout="${longdate} ${message}" />
  </targets>

  <rules>
    <!-- Example: Using 'variable1' in a filter -->
    <logger name="*" minlevel="Trace" writeTo="fileTarget">
      <filters>
        <when condition="'${gdc:item=variable1}' == 'value1'" action="Log" />
      </filters>
    </logger>

    <!-- Example: Using 'variable2' in a filter -->
    <logger name="*" minlevel="Trace" writeTo="fileTarget">
      <filters>
        <when condition="'${gdc:item=variable2}' == 'value2'" action="Log" />
      </filters>
    </logger>
  </rules>

</nlog>



