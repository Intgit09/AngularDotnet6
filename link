https://www.c-sharpcorner.com/article/upload-large-files-to-mvc-webapi-using-partitioning/

services.Configure<IISServerOptions>(options =>
            {
                options.MaxRequestBodySize = null;
            });
services.Configure<KestrelServerOptions>(options =>
            {
                options.Limits.MaxRequestBodySize = null;
            });

List<FileModel>
The API endpoint performs validation to ensure the total size of all attachments does not exceed 35 MB. If the validation fails, the API will return an appropriate error message.

POST /api/upload HTTP/1.1
Content-Type: application/json

{
  "files": [
    {
      "FileName": "example-image.jpg",
      "Content": "<binary-data>",
      "FileType": "image/jpeg"
    },
    {
      "FileName": "example-document.pdf",
      "Content": "<binary-data>",
      "FileType": "application/pdf"
    }
  ]
}


<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <targets>
    <!-- Target 1 - Primary target -->
    <target xsi:type="File" name="target1" fileName="logs/logfile.txt"
            layout="${longdate} ${level:uppercase=true} ${message}" />

    <!-- Target 2 - Fallback target -->
    <target xsi:type="File" name="target2" fileName="logs/fallback_logfile.txt"
            layout="${longdate} ${level:uppercase=true} ${message}" />
  </targets>

  <rules>
    <!-- Rule for Target 1 (primary) -->
    <logger name="*" minlevel="Trace" writeTo="target1" />

    <!-- Rule for Target 2 (fallback) -->
    <logger name="*" minlevel="Trace" writeTo="target2" />
  </rules>

</nlog>
using Serilog;
using Serilog.Events;
using Serilog.Sinks.Splunk;
using Serilog.Sinks.File;

public class Program
{
    public static void Main(string[] args)
    {
        Log.Logger = new LoggerConfiguration()
            .MinimumLevel.Verbose()
            .WriteTo.Logger(lc =>
                lc.Filter.ByIncludingOnly(evt => evt.Level >= LogEventLevel.Information)
                    .WriteTo.Splunk(
                        host: "your_splunk_host",
                        port: 8088,
                        source: "your_source_name",
                        index: "your_index_name",
                        customFields: new[] { new Field("your_custom_field_name", "your_custom_field_value") }))
            .WriteTo.File("logs/logfile.txt", rollingInterval: RollingInterval.Day)
            .CreateLogger();

        // Sample log statements
        Log.Information("This is an informational message.");
        Log.Error("An error occurred.");

        Log.CloseAndFlush();
    }
}
{
  "Serilog": {
    "Using": ["Serilog.Sinks.Splunk", "Serilog.Sinks.File"],
    "MinimumLevel": "Verbose",
    "WriteTo": [
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "WriteTo": [
              {
                "Name": "Splunk",
                "Args": {
                  "host": "your_splunk_host",
                  "port": 8088,
                  "source": "your_source_name",
                  "index": "your_index_name",
                  "customFields": [
                    { "Name": "your_custom_field_name", "Value": "your_custom_field_value" }
                  ]
                }
              },
              {
                "Name": "File",
                "Args": {
                  "path": "logs/logfile.txt",
                  "rollingInterval": "Day"
                }
              }
            ]
          },
          "restrictedToMinimumLevel": "Information"
        }
      }
    ]
  }
}


using NLog;

public class Program
{
    public static void Main(string[] args)
    {
        // Set the NLog variables
        GlobalDiagnosticsContext.Set("variable1", "value1");
        GlobalDiagnosticsContext.Set("variable2", "value2");
        // ...

        // Configure NLog and start logging
        // ...
    }
}
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <!-- Other NLog configurations -->

  <targets>
    <target xsi:type="File" name="fileTarget" fileName="logfile.txt" layout="${longdate} ${message}" />
  </targets>

  <rules>
    <!-- Example: Using 'variable1' in a filter -->
    <logger name="*" minlevel="Trace" writeTo="fileTarget">
      <filters>
        <when condition="'${gdc:item=variable1}' == 'value1'" action="Log" />
      </filters>
    </logger>

    <!-- Example: Using 'variable2' in a filter -->
    <logger name="*" minlevel="Trace" writeTo="fileTarget">
      <filters>
        <when condition="'${gdc:item=variable2}' == 'value2'" action="Log" />
      </filters>
    </logger>
  </rules>

</nlog>





**API Design Documentation:**

Title: API Design Guidelines - Audit Log Attribute and Custom Data Provider for Microservices

Summary: This document outlines the integration of the Audit.NET library into your ASP.NET Core microservices for comprehensive audit logging. It covers the usage of the `AuditLogAttribute` to annotate API endpoints and creating a custom data provider to store audit logs in a database.

Key Points:
- **AuditLogAttribute**: Learn how to annotate API endpoints across microservices with the `AuditLogAttribute` to automatically capture audit logs for incoming requests.

- **Custom Data Provider**: Understand how to create a custom data provider using ADO.NET to store audit logs in a database, providing a central repository for audit information across microservices.

Code Snippets and Explanation:

1. **AuditLogAttribute Usage:**

```csharp
[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    [HttpGet("{id}")]
    [AuditLog(Operation = "GetUser", IncludeRequestBody = false)]
    public async Task<IActionResult> GetUser(int id)
    {
        // Retrieve user logic
        return Ok(user);
    }
}
```

Explanation: The `AuditLogAttribute` is applied to an API endpoint (`GetUser`) to capture audit logs. The `Operation` parameter specifies the name of the operation, and `IncludeRequestBody` determines whether to include request body in the log.

2. **Custom Data Provider with ADO.NET:**

```csharp
public class CustomDataProvider : AuditDataProvider
{
    public override object InsertEvent(AuditEvent auditEvent)
    {
        using (var connection = new SqlConnection("YourConnectionString"))
        {
            connection.Open();
            var cmd = connection.CreateCommand();
            cmd.CommandText = "INSERT INTO AuditLog (EventDate, EventType, Username) VALUES (@EventDate, @EventType, @Username)";
            cmd.Parameters.AddWithValue("@EventDate", auditEvent.StartDate);
            cmd.Parameters.AddWithValue("@EventType", auditEvent.Environment.CallingMethodName);
            cmd.Parameters.AddWithValue("@Username", auditEvent.Environment.UserName);
            cmd.ExecuteNonQuery();
        }
        
        return null; // No need to return an ID for this example
    }
}
```

```csharp
public void ConfigureServices(IServiceCollection services)
{
    services.AddControllers();

    // Configure Audit.NET to use the custom data provider
    Audit.Core.Configuration.Setup()
        .UseCustomProvider(new CustomDataProvider());
}
```

Explanation: The `CustomDataProvider` class uses ADO.NET to insert audit events into a database. In the `ConfigureServices` method, the custom data provider is configured in Audit.NET.

**Database Table Design:**

```sql
CREATE TABLE AuditLog (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    EventDate DATETIME NOT NULL,
    EventType NVARCHAR(100) NOT NULL,
    Username NVARCHAR(50) NOT NULL
);
```

Explanation: The `AuditLog` table stores audit logs with columns for the event date, event type, and username.

By incorporating the `AuditLogAttribute` and a custom data provider with ADO.NET, your microservices gain a powerful audit trail, ensuring accountability and traceability across their interactions.

With this approach, your API design ensures comprehensive audit logging and centralized storage, promoting transparency and security across your microservices ecosystem.

*Note: Be sure to install and reference the Audit.NET NuGet package (`Audit.NET`, `Audit.NET.AspNetCore`, and `System.Data.SqlClient`) in your project to utilize these features.*








