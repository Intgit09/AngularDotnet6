using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Threading.Tasks;

public class NetworkService : BackgroundService
{
    private readonly int port;
    private TcpListener listener;

    public NetworkService(int port)
    {
        this.port = port;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        listener = new TcpListener(IPAddress.Any, port);
        listener.Start();

        Console.WriteLine($"Server listening on port {port}");

        while (!stoppingToken.IsCancellationRequested)
        {
            try
            {
                TcpClient client = await listener.AcceptTcpClientAsync(stoppingToken);
                Console.WriteLine("Client connected!");

                // Start a background task to handle the client connection
                Task clientTask = HandleClientAsync(client, stoppingToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error accepting client: {ex.Message}");
            }
        }

        listener.Stop();
    }

    private async Task HandleClientAsync(TcpClient client, CancellationToken stoppingToken)
    {
        using (NetworkStream stream = client.GetStream())
        {
            // Read data from the client
            byte[] buffer = new byte[1024];
            int bytesRead;

            while (!stoppingToken.IsCancellationRequested && (bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length, stoppingToken)) > 0)
            {
                // Process the received data
                string data = System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead);
                Console.WriteLine($"Received from client: {data}");

                // Optionally, send a response back to the client
                // ...

                // Clear the buffer for the next read
                Array.Clear(buffer, 0, buffer.Length);
            }
        }

        client.Close();
        Console.WriteLine("Client disconnected.");
    }

    public override async Task StopAsync(CancellationToken stoppingToken)
    {
        await base.StopAsync(stoppingToken);

        // Gracefully stop the listener
        listener.Stop();
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        int port = 12345; // Replace with your desired port

        var service = new NetworkService(port);
        service.Run();

        Console.WriteLine("Press any key to stop the server...");
        Console.ReadKey();
    }
}
