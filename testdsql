using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;

public class RequestLoggingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<RequestLoggingMiddleware> _logger;

    public RequestLoggingMiddleware(RequestDelegate next, ILogger<RequestLoggingMiddleware> logger)
    {
        _next = next ?? throw new ArgumentNullException(nameof(next));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task InvokeAsync(HttpContext context)
    {
        context.Request.EnableBuffering();

        try
        {
            // Read the request payload
            using var reader = new StreamReader(context.Request.Body, Encoding.UTF8, true, 1024, true);
            var requestBody = await reader.ReadToEndAsync();

            // Log sanitized payload
            Log.Information("Received request: {@SanitizedRequest}", SanitizeRequest(requestBody));

            // Rewind the stream so the request can be processed downstream
            context.Request.Body.Seek(0, SeekOrigin.Begin);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error reading and logging request payload");
        }

        await _next(context);
    }

    private object SanitizeRequest(string requestBody)
    {
        try
        {
            // Parse the JSON request body
            var jsonDocument = JsonDocument.Parse(requestBody);

            // Customize this logic to redact or modify sensitive data as needed
            // For example, you might set sensitive fields to a placeholder value
            // This example redacts all properties at the first level
            var sanitizedJson = new JsonObject();
            foreach (var property in jsonDocument.RootElement.EnumerateObject())
            {
                if (property.Value.ValueKind == JsonValueKind.String)
                {
                    sanitizedJson.Add(property.Name, "REDACTED");
                }
            }

            return sanitizedJson;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error sanitizing request payload");
            return "Error sanitizing request payload";
        }
    }
}

public static class RequestLoggingMiddlewareExtensions
{
    public static IApplicationBuilder UseRequestLogging(this IApplicationBuilder builder)
    {
        return builder.UseMiddleware<RequestLoggingMiddleware>();
    }
}
